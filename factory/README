假如我有一个需求，想要一辆车，在程序的世界里，就去定义一个类，而我就是main方法，这个时候我可以new一个车，这个过程好像是我自己在生产一样
在设计程序的时候，有这么一种设计模式，我不直接new车，我需要一个工厂来帮我生产车，我只需要传过去一个order，这个工厂就能把车给我送过啦，

对比A过程和B过程，可以发现，我完全不和车的生产new有半点关系，我只给工厂下订单，想想吧，这种程序设计思维是不是很酷。而这个工厂需要做的事情是
根据，客户提交来的订单，去制造生产该类型汽车的流水线，也就是本例子中的类，比如宝马类，奥迪类。另外在工厂本类中重构自己的getCar（）方法，
比如新增了一条流水线生产大众，那么需要多添加一个else if（）语句，这违背了程序设计的一个原则：开放封闭原则！
一个工厂。但是拥有很多的流水线！！

所以，就有了工厂方法模式（抽象工厂模式）。